Executing test #1 - Async keyword with a lambda expressions
Executing test #2 - Async keyword with a lambda expressions and local variable captured and shadowed
Executing test #3 - Async function in a statement
Test #3 - Success function #1 called with result = '30'
Test #3 - Success function #5 called with result = '30'
Executing test #4 - Async function in an object
Test #4 - Success function in a object #2 called with result = '12'
Executing test #5 - Async classes
Test #5 - Success async in a class #8 called with result = '10'
Test #5 - Success async in a class #9 called with result = '10'
Executing test #6 - Await in an async function
Executing test #7 - Await keyword with a lambda expressions
Executing test #8 - Async function with default arguments's value
Executing test #9 - Promise in an Async function
Executing test #10 - %AsyncFunction% constructor creates async functions analogous to Function constructor
Executing test #11 - local variables with same names as formal parameters have proper redeclaration semantics (non-error cases, var and function)
Executing test #12 - this value in async functions behaves like it does in normal functions
Executing test #13 - arguments value in async functions behaves like it does in normal functions
Executing test #14 - super value in async methods behaves like it does in normal methods
Executing test #15 - Async function with formal captured in a lambda
Executing test #16 - Async function with formal captured in a nested function
Executing test #17 - Async function with formal captured in eval
Executing test #18 - Async function with formal capturing in param scope
Executing test #19 - Async function with formal capturing in param scope with eval in the body
Executing test #20 - Async function with duplicate variable declaration in the body with eval
Executing test #21 - Async function with duplicate variable declaration in the body with child having eval
Executing test #22 - Async function with more than one await
Executing test #23 - Async function with more than one await with branching
Executing test #24 - Async function with an exception in an await expression
Executing test #25 - Async functions throws on an await
Executing test #26 - Awaiting a function with multiple awaits
Executing test #27 - Async function with nested try-catch in the body
Executing test #28 - Async function with try-catch and try-finally in the body
Executing test #29 - Async function and with
Executing test #30 - Async and arguments.callee
Executing test #31 - Async and arguments.caller
Executing test #32 - Async and split scope
Test #32 - Success initial value of the formal is the same as the default param value
Test #32 - Success initial value of the body symbol is the same as the default param value
Executing test #33 - `then` is not called when awaiting a non-promise or native promise
Executing test #34 - `then` is called when awaiting a promise subclass
Executing test #35 - `then` is called when awaiting a non-promise thenable
Executing test #36 - The constructor property is only accessed once by await
Test #36 - constructor property accessed

Completion Results:
Test #1 - Success lambda expression with no argument called with result = 'true'
Test #1 - Success lambda expression with several arguments called with result = '60'
Test #2 - Success lambda expression with single argument and no paren called with result = '12'
Test #2 - Success lambda expression with a single argument a called with result = '12'
Test #3 - Success function #2 called with result = '30'
Test #3 - Success function #3 called with result = '-10'
Test #3 - Success function #4 called with result = '12'
Test #4 - Success function in a object #1 called with result = '12'
Test #4 - Success function in a object #3 called with result = '12'
Test #4 - Success function in a object #4 called with result = '12'
Test #4 - Success function in a object #5 called with result = '12'
Test #4 - Success function in a object #6 called with result = '12'
Test #5 - Success async in a class #1 called with result = '10'
Test #5 - Success async in a class #2 called with result = '10'
Test #5 - Success async in a class #3 called with result = '12'
Test #5 - Success async in a class #4 called with result = '12'
Test #5 - Success async in a class #5 called with result = '12'
Test #5 - Success async in a class #6 called with result = '12'
Test #5 - Success async in a class #7 called with result = '10'
Test #5 - Success async in a class #10 called with result = '10'
Test #8 - Success async function with default arguments's value overwritten #1 called with result = 'true'
Test #8 - Success async function with default arguments's value has been rejected as expected by 'err' #2 called with err = 'expected error'
Test #8 - Success async function with default arguments's value #3 called with result = 'true'
Test #11 - Success inner var x overwrote formal parameter x only after the declaration statement
Test #11 - Success inner function x() overwrote formal parameter x
Test #12 - Success this value set to 5
Test #12 - Success this value set to { af: af, b: "abc" }
Test #13 - Success result is 'ab' from arguments 'a' + 'b'
Test #14 - Success result is 'base derived' from derived method call
Test #15 - Success lambda returns 1 when no arguments passed
Test #16 - Success nested function returns 1 when no arguments passed
Test #17 - Success eval returns 1 when no arguments passed
Test #18 - Success inner function declaration captures the body variable
Test #18 - Success function defined in the param scope captures the param scope variable
Test #19 - Success inner function declaration captures the body variable with eval in the body
Test #19 - Success function defined in the param scope captures the param scope variable with eval in the body
Test #20 - Success inner variable declaration shadows the formal
Test #21 - Success inner variable declaration shadows the formal with eval in child function
Test #27 - Success Caught the expected exception inside the inner catch in async body
Test #27 - Success Caught the expected exception inside catch in async body
Test #28 - Success Caught the expected exception inside the inner catch in async body
Test #28 - Success finally block is executed in async body
Test #30 - Success async function and arguments.callee
Test #32 - Success updated value of the formal is the same as the value returned from the second async function
Test #32 - Success updated value of the body symbol is the same as the value returned from the second async function
Test #34 - Success "then" called on a promise subclass
Test #35 - Success "then" called on a thenable
Test #6 - Success await in an async function #1 called with result = '-4'
Test #6 - Success await in an async function #2 called with result = '2'
Test #6 - Success await in an async function catch a rejected Promise in 'err'. Error = 'Error: My Error'
Test #6 - Success await in an async function catch an error in 'err'. Error = '32'
Test #7 - Success await keyword with a lambda expressions #1 called with result = '125'
Test #7 - Success await keyword with a lambda expressions #1 called with result = '60'
Test #9 - Success resolved promise in an async function #2 called with result = 'resolved'
Test #10 - Success %AsyncFunction% created async function #1 called with result = '0'
Test #23 - Success functions completes the first await call
Test #23 - Success functions completes the second await call
Test #24 - Success caught the expected exception
Test #25 - Success caught the expected exception
Test #31 - Success async function returned through caller property is the same as the original async function
Test #32 - Success value returned through await is assigned to the formal
Test #32 - Success value returned through await is not assigned to the formal
Test #9 - Success resolved promise in an async function #1 called with result = 'resolved'
Test #9 - Success promise in an async function has been rejected as expected by 'err' #3 called with err = 'rejected'
Test #22 - Success functions completes both await calls
Test #29 - Success functions call inside with returns the right this object
Test #31 - Success async function returned through caller property behaves the same way as the original async function
Test #10 - Success %AsyncFunction% created async function #2 called with result = '6'
Test #26 - Success Multiple awaits in the inner function completed
